{"ast":null,"code":"var _jsxFileName = \"/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/EmptyCave.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { colors } from \"../../utils/CustomTheme\";\nimport { puzzleInputs } from \"../../utils/PuzzleInputs\";\nimport { Grid } from \"../Atoms\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst range = n => new Array(n).fill().map((v, i) => i);\n\nconst createBooleanGrid = (width, height) => {\n  return new Array(height).fill().map(() => new Array(width).fill(false));\n};\n\nconst sandOrigin = {\n  x: 500,\n  y: 0\n};\n\nconst EmptyCave = _ref => {\n  _s();\n\n  let {\n    sx,\n    version\n  } = _ref;\n  const [booleanCave, setBooleanCave] = React.useState(null);\n  React.useEffect(() => {\n    const parsed = puzzleInputs[14][version].split(\"\\n\").map(line => line.split(\" -> \").map(pos => pos.split(\",\").map(n => parseInt(n))).map(pos => ({\n      x: pos[0],\n      y: pos[1]\n    })));\n    const largestY = parsed.flat().map(pos => pos.y).sort((a, b) => b - a)[0];\n    const largestX = parsed.flat().map(pos => pos.x).sort((a, b) => b - a)[0];\n    const smallestX = parsed.flat().map(pos => pos.x).sort((a, b) => a - b)[0];\n    const cave = createBooleanGrid(largestX - smallestX, largestY + 1);\n    parsed.forEach(formation => {\n      formation.slice(0, -1).forEach((pos, i) => {\n        const nextPos = formation[i + 1];\n        const xDiff = Math.abs(pos.x - nextPos.x);\n\n        if (xDiff > 0) {\n          range(xDiff + 1).forEach(offset => {\n            if (pos.x > nextPos.x) cave[pos.y][pos.x - offset] = true;\n            if (pos.x < nextPos.x) cave[pos.y][pos.x + offset] = true;\n          });\n        }\n\n        const yDiff = Math.abs(pos.y - nextPos.y);\n\n        if (yDiff > 0) {\n          range(yDiff + 1).forEach(offset => {\n            if (pos.y > nextPos.y) cave[pos.y - offset][pos.x] = true;\n            if (pos.y < nextPos.y) cave[pos.y + offset][pos.x] = true;\n          });\n        }\n      });\n    });\n    setBooleanCave(cave);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    sx: sx,\n    booleanGrid: booleanCave,\n    renderTrue: () => ({\n      backgroundColor: colors.saffron\n    }),\n    renderFalse: () => ({}),\n    height: booleanCave.length * 4,\n    width: booleanCave[0].length * 4\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 12\n  }, this);\n};\n\n_s(EmptyCave, \"bDsc/gL2AaYSvn7jcY+/Uud7Mc4=\");\n\n_c = EmptyCave;\nexport default EmptyCave;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmptyCave\");","map":{"version":3,"names":["React","colors","puzzleInputs","Grid","range","n","Array","fill","map","v","i","createBooleanGrid","width","height","sandOrigin","x","y","EmptyCave","sx","version","booleanCave","setBooleanCave","useState","useEffect","parsed","split","line","pos","parseInt","largestY","flat","sort","a","b","largestX","smallestX","cave","forEach","formation","slice","nextPos","xDiff","Math","abs","offset","yDiff","backgroundColor","saffron","length"],"sources":["/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/EmptyCave.js"],"sourcesContent":["import React from \"react\"\nimport { colors } from \"../../utils/CustomTheme\"\nimport { puzzleInputs } from \"../../utils/PuzzleInputs\"\n\nimport { Grid } from \"../Atoms\"\nconst range = n => new Array(n)\n    .fill()\n    .map((v, i) => i)\n\nconst createBooleanGrid = (width, height) => {\n    return new Array(height)\n        .fill()\n        .map(() => new Array(width).fill(false))\n}\nconst sandOrigin = { x: 500, y: 0 }\n\nconst EmptyCave = ({ sx, version }) => {\n    const [booleanCave, setBooleanCave] = React.useState(null)\n    React.useEffect(() => {\n        const parsed = puzzleInputs[14][version].split(\"\\n\")\n            .map(line => line\n                .split(\" -> \")\n                .map(pos => pos\n                    .split(\",\")\n                    .map(n => parseInt(n))\n                )\n                .map(pos => ({ x: pos[0], y: pos[1] }))\n            )\n        const largestY = parsed.flat().map(pos => pos.y).sort((a, b) => b - a)[0]\n        const largestX = parsed.flat().map(pos => pos.x).sort((a, b) => b - a)[0]\n        const smallestX = parsed.flat().map(pos => pos.x).sort((a, b) => a - b)[0]\n        const cave = createBooleanGrid(largestX - smallestX, largestY + 1)\n        parsed.forEach(formation => {\n            formation\n                .slice(0, -1)\n                .forEach((pos, i) => {\n                    const nextPos = formation[i + 1]\n                    const xDiff = Math.abs(pos.x - nextPos.x)\n                    if (xDiff > 0) {\n                        range(xDiff + 1)\n                            .forEach(offset => {\n                                if (pos.x > nextPos.x) cave[pos.y][pos.x - offset] = true\n                                if (pos.x < nextPos.x) cave[pos.y][pos.x + offset] = true\n                            })\n                    }\n                    const yDiff = Math.abs(pos.y - nextPos.y)\n                    if (yDiff > 0) {\n                        range(yDiff + 1)\n                            .forEach(offset => {\n                                if (pos.y > nextPos.y) cave[pos.y - offset][pos.x] = true\n                                if (pos.y < nextPos.y) cave[pos.y + offset][pos.x] = true\n                            })\n                    }\n                })\n        })\n        setBooleanCave(cave)\n\n    }, [])\n\n    return <Grid\n        sx={sx}\n        booleanGrid={booleanCave}\n        renderTrue={() => ({ backgroundColor: colors.saffron })}\n        renderFalse={() => ({})}\n        height={booleanCave.length * 4}\n        width={booleanCave[0].length * 4}\n    />\n}\n\nexport default EmptyCave\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}