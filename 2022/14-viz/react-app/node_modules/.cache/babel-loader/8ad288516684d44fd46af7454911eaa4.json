{"ast":null,"code":"var _jsxFileName = \"/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/PuzzleInput.js\",\n    _s = $RefreshSig$();\n\nimport { ToggleButton, ToggleButtonGroup } from \"@mui/material\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [\"example\", \"real\"];\n\nconst usePuzzleState = initialValue => {\n  _s();\n\n  const [value, setValue] = React.useState(initialValue);\n  return {\n    value,\n    setValue\n  };\n};\n\n_s(usePuzzleState, \"L08zUdRTae9t+nWvf9xbU6NcRrM=\");\n\nconst PuzzleInput = _ref => {\n  let {\n    sx,\n    puzzleState: {\n      value,\n      setValue\n    }\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n    value: value,\n    exclusive: true,\n    onChange: event => setValue(event.target.value),\n    children: options.map(value => /*#__PURE__*/_jsxDEV(ToggleButton, {\n      value: value,\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 12\n  }, this);\n};\n\n_c = PuzzleInput;\nexport default PuzzleInput;\nexport { usePuzzleState, options };\n\nvar _c;\n\n$RefreshReg$(_c, \"PuzzleInput\");","map":{"version":3,"names":["ToggleButton","ToggleButtonGroup","React","options","usePuzzleState","initialValue","value","setValue","useState","PuzzleInput","sx","puzzleState","event","target","map"],"sources":["/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/PuzzleInput.js"],"sourcesContent":["import { ToggleButton, ToggleButtonGroup } from \"@mui/material\"\nimport React from \"react\"\n\nconst options = [\"example\", \"real\"]\n\nconst usePuzzleState = initialValue => {\n    const [value, setValue] = React.useState(initialValue)\n    return {\n        value,\n        setValue,\n    }\n}\n\nconst PuzzleInput = ({ sx, puzzleState: { value, setValue } }) => {\n    return <ToggleButtonGroup\n        value={value}\n        exclusive\n        onChange={event => setValue(event.target.value)}\n    >\n        {options.map(value => (\n            <ToggleButton value={value} >\n                {value}\n            </ToggleButton>\n        ))}\n    </ToggleButtonGroup>\n}\n\nexport default PuzzleInput\nexport {\n    usePuzzleState,\n    options,\n}\n"],"mappings":";;;AAAA,SAASA,YAAT,EAAuBC,iBAAvB,QAAgD,eAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAG,CAAC,SAAD,EAAY,MAAZ,CAAhB;;AAEA,MAAMC,cAAc,GAAGC,YAAY,IAAI;EAAA;;EACnC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,QAAN,CAAeH,YAAf,CAA1B;EACA,OAAO;IACHC,KADG;IAEHC;EAFG,CAAP;AAIH,CAND;;GAAMH,c;;AAQN,MAAMK,WAAW,GAAG,QAA8C;EAAA,IAA7C;IAAEC,EAAF;IAAMC,WAAW,EAAE;MAAEL,KAAF;MAASC;IAAT;EAAnB,CAA6C;EAC9D,oBAAO,QAAC,iBAAD;IACH,KAAK,EAAED,KADJ;IAEH,SAAS,MAFN;IAGH,QAAQ,EAAEM,KAAK,IAAIL,QAAQ,CAACK,KAAK,CAACC,MAAN,CAAaP,KAAd,CAHxB;IAAA,UAKFH,OAAO,CAACW,GAAR,CAAYR,KAAK,iBACd,QAAC,YAAD;MAAc,KAAK,EAAEA,KAArB;MAAA,UACKA;IADL;MAAA;MAAA;MAAA;IAAA,QADH;EALE;IAAA;IAAA;IAAA;EAAA,QAAP;AAWH,CAZD;;KAAMG,W;AAcN,eAAeA,WAAf;AACA,SACIL,cADJ,EAEID,OAFJ"},"metadata":{},"sourceType":"module"}