{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n/* eslint-disable no-constant-condition */\n\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId } from '@mui/utils'; // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\n\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\n\nexport function createFilterOptions() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, _ref) => {\n    let {\n      inputValue,\n      getOptionLabel\n    } = _ref;\n    let input = trim ? inputValue.trim() : inputValue;\n\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n} // To replace with .findIndex() once we stop IE11 support.\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nconst defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.\n\nconst pageSize = 5;\n\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\n\nexport default function useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n\n      return String(optionLabel);\n    }\n\n    return optionLabel;\n  };\n\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n\n    let newInputValue;\n\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n\n    if (inputValue === newInputValue) {\n      return;\n    }\n\n    setInputValueState(newInputValue);\n\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const prevValue = React.useRef();\n  React.useEffect(() => {\n    const valueChange = value !== prevValue.current;\n    prevValue.current = value;\n\n    if (focused && !valueChange) {\n      return;\n    } // Only reset the input's value when freeSolo if the component's value changes.\n\n\n    if (freeSolo && !valueChange) {\n      return;\n    }\n\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, prevValue, freeSolo]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n\n    return true;\n  }), // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  }); // Ensure the focusedTag is never inconsistent\n\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const setHighlightedIndex = useEventCallback(_ref2 => {\n    let {\n      event,\n      index,\n      reason = 'auto'\n    } = _ref2;\n    highlightedIndexRef.current = index; // does the index exist?\n\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n\n    if (!listboxRef.current) {\n      return;\n    }\n\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]'); // \"No results\"\n\n    if (!listboxNode) {\n      return;\n    }\n\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n\n    if (!option) {\n      return;\n    }\n\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    } // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/ARIA/apg/example-index/combobox/js/select-only.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n\n\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(_ref3 => {\n    let {\n      event,\n      diff,\n      direction = 'next',\n      reason = 'auto'\n    } = _ref3;\n\n    if (!popupOpen) {\n      return;\n    }\n\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n\n      if (diff === 'start') {\n        return 0;\n      }\n\n      if (diff === 'end') {\n        return maxIndex;\n      }\n\n      const newIndex = highlightedIndexRef.current + diff;\n\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n\n        return maxIndex;\n      }\n\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n\n        return 0;\n      }\n\n      return newIndex;\n    };\n\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    }); // Sync the content of the input with the highlighted option.\n\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    const valueItem = multiple ? value[0] : value; // The popup is empty, reset\n\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n\n    if (!listboxRef.current) {\n      return;\n    } // Synchronize the value with the highlighted index\n\n\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible\n\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n\n      return;\n    } // Prevent the highlighted index to leak outside the boundaries.\n\n\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    } // Restore the focus to the previous index.\n\n\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [// Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length, // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n\n    if (!node) {\n      return;\n    }\n\n    syncHighlightedIndex();\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n\n    setOpenState(true);\n    setInputPristine(true);\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n\n    setOpenState(false);\n\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n\n    setValueState(newValue);\n  };\n\n  const isTouch = React.useRef(false);\n\n  const selectNewValue = function (event, option) {\n    let reasonProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'selectOption';\n    let origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'options';\n    let reason = reasonProp;\n    let newValue = option;\n\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n\n    let nextTag = focusedTag;\n\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    } // Wait until IME is settled.\n\n\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.\n\n            event.preventDefault();\n\n            if (disabled) {\n              return;\n            }\n\n            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.\n\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n\n          break;\n\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClear(event);\n          }\n\n          break;\n\n        case 'Backspace':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        case 'Delete':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const handleFocus = event => {\n    setFocused(true);\n\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n\n    handleClose(event, 'blur');\n  };\n\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const handleOptionMouseOver = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'mouse'\n    });\n  };\n\n  const handleOptionTouchStart = () => {\n    isTouch.current = true;\n  };\n\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  }; // Prevent input blur when interacting with the combobox\n\n\n  const handleMouseDown = event => {\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  }; // Focus the input when interacting with the combobox\n\n\n  const handleClick = () => {\n    inputRef.current.focus();\n\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n\n    firstFocus.current = false;\n  };\n\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n\n          indexBy.set(group, true);\n        }\n\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n\n      return acc;\n    }, []);\n  }\n\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n\n  return {\n    getRootProps: function () {\n      let other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        'aria-owns': listboxAvailable ? `${id}-listbox` : null\n      }, other, {\n        onKeyDown: handleKeyDown(other),\n        onMouseDown: handleMouseDown,\n        onClick: handleClick\n      });\n    },\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperativeley so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox'\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: _ref4 => {\n      let {\n        index\n      } = _ref4;\n      return _extends({\n        key: index,\n        'data-tag-index': index,\n        tabIndex: -1\n      }, !readOnly && {\n        onDelete: handleTagDelete(index)\n      });\n    },\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: _ref5 => {\n      let {\n        index,\n        option\n      } = _ref5;\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseOver: handleOptionMouseOver,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}","map":{"version":3,"names":["_extends","React","unstable_setRef","setRef","unstable_useEventCallback","useEventCallback","unstable_useControlled","useControlled","unstable_useId","useId","stripDiacritics","string","normalize","replace","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","indexOf","slice","findIndex","array","comp","i","length","defaultFilterOptions","pageSize","defaultIsActiveElementInListbox","listboxRef","_listboxRef$current$p","current","parentElement","contains","document","activeElement","useAutocomplete","props","unstable_isActiveElementInListbox","unstable_classNamePrefix","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledProp","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionLabelProp","_option$label","label","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValueProp","isOptionEqualToValue","value","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openProp","openOnFocus","readOnly","selectOnFocus","valueProp","optionLabel","process","env","NODE_ENV","erroneousReturn","undefined","console","error","JSON","String","ignoreFocus","useRef","firstFocus","inputRef","anchorEl","setAnchorEl","useState","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","controlled","default","name","setInputValueState","state","focused","setFocused","resetInputValue","useCallback","event","newValue","isOptionSelected","newInputValue","prevValue","useEffect","valueChange","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","listboxAvailable","missingValue","warn","join","focusTag","tagToFocus","focus","querySelector","validOptionIndex","index","direction","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","setHighlightedIndex","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","getNextIndex","maxIndex","newIndex","Math","abs","nextIndex","setSelectionRange","syncHighlightedIndex","valueItem","currentOption","val","itemIndex","optionItem","handleListboxRef","node","nodeName","handleOpen","handleClose","handleValue","details","every","isTouch","selectNewValue","reasonProp","origin","Array","isArray","matches","push","splice","ctrlKey","metaKey","blur","validTagIndex","handleFocusTag","nextTag","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","handleInputChange","target","handleOptionMouseOver","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","indexBy","Map","reduce","acc","group","get","set","getRootProps","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","ref","autoCapitalize","spellCheck","role","getClearProps","tabIndex","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","selected","onMouseOver","onTouchStart"],"sources":["/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/node_modules/@mui/base/AutocompleteUnstyled/useAutocomplete.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when pageup and pagedown keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nexport default function useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const prevValue = React.useRef();\n  React.useEffect(() => {\n    const valueChange = value !== prevValue.current;\n    prevValue.current = value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, prevValue, freeSolo]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/ARIA/apg/example-index/combobox/js/select-only.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseOver = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'mouse'\n    });\n  };\n  const handleOptionTouchStart = () => {\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = () => {\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperativeley so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox'\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => _extends({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseOver: handleOptionMouseOver,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}