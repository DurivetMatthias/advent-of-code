{"ast":null,"code":"var _jsxFileName = \"/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/EmptyCave.js\";\nimport { colors } from \"../../utils/CustomTheme\";\nimport { puzzleInputs } from \"../../utils/PuzzleInputs\";\nimport { Grid } from \"../Atoms\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst range = n => new Array(n).fill().map((v, i) => i);\n\nconst createBooleanGrid = (width, height) => {\n  return new Array(height).fill().map(() => new Array(width).fill(false));\n};\n\nconst sandOrigin = {\n  x: 500,\n  y: 0\n};\n\nconst EmptyCave = _ref => {\n  let {\n    version\n  } = _ref;\n  const parsed = puzzleInputs[14][version].split(\"\\n\").map(line => line.split(\" -> \").map(pos => pos.split(\",\").map(n => parseInt(n))).map(pos => ({\n    x: pos[0],\n    y: pos[1]\n  })));\n  const largestY = parsed.flat().map(pos => pos.y).sort((a, b) => b - a)[0];\n  const booleanCave = createBooleanGrid(sandOrigin.x * 2, largestY + 1);\n  parsed.forEach(formation => {\n    formation.slice(0, -1).forEach((pos, i) => {\n      const nextPos = formation[i + 1];\n      const xDiff = Math.abs(pos.x - nextPos.x);\n\n      if (xDiff > 0) {\n        range(xDiff + 1).forEach(offset => {\n          if (pos.x > nextPos.x) booleanCave[pos.y][pos.x - offset] = true;\n          if (pos.x < nextPos.x) booleanCave[pos.y][pos.x + offset] = true;\n        });\n      }\n\n      const yDiff = Math.abs(pos.y - nextPos.y);\n\n      if (yDiff > 0) {\n        range(yDiff + 1).forEach(offset => {\n          if (pos.y > nextPos.y) booleanCave[pos.y - offset][pos.x] = true;\n          if (pos.y < nextPos.y) booleanCave[pos.y + offset][pos.x] = true;\n        });\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    booleanGrid: booleanCave,\n    renderTrue: () => ({\n      backgroundColor: colors.saffron\n    }),\n    renderFalse: () => ({}),\n    height: booleanCave.length * 50,\n    width: booleanCave[0].length * 50\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 12\n  }, this);\n};\n\n_c = EmptyCave;\nexport default EmptyCave;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmptyCave\");","map":{"version":3,"names":["colors","puzzleInputs","Grid","range","n","Array","fill","map","v","i","createBooleanGrid","width","height","sandOrigin","x","y","EmptyCave","version","parsed","split","line","pos","parseInt","largestY","flat","sort","a","b","booleanCave","forEach","formation","slice","nextPos","xDiff","Math","abs","offset","yDiff","backgroundColor","saffron","length"],"sources":["/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/EmptyCave.js"],"sourcesContent":["import { colors } from \"../../utils/CustomTheme\"\nimport { puzzleInputs } from \"../../utils/PuzzleInputs\"\n\nimport { Grid } from \"../Atoms\"\nconst range = n => new Array(n)\n    .fill()\n    .map((v, i) => i)\n\nconst createBooleanGrid = (width, height) => {\n    return new Array(height)\n        .fill()\n        .map(() => new Array(width).fill(false))\n}\nconst sandOrigin = { x: 500, y: 0 }\n\nconst EmptyCave = ({ version }) => {\n    const parsed = puzzleInputs[14][version].split(\"\\n\")\n        .map(line => line\n            .split(\" -> \")\n            .map(pos => pos\n                .split(\",\")\n                .map(n => parseInt(n))\n            )\n            .map(pos => ({ x: pos[0], y: pos[1] }))\n        )\n    const largestY = parsed.flat().map(pos => pos.y).sort((a, b) => b - a)[0]\n    const booleanCave = createBooleanGrid(sandOrigin.x * 2, largestY + 1)\n    parsed.forEach(formation => {\n        formation\n            .slice(0, -1)\n            .forEach((pos, i) => {\n                const nextPos = formation[i + 1]\n                const xDiff = Math.abs(pos.x - nextPos.x)\n                if (xDiff > 0) {\n                    range(xDiff + 1)\n                        .forEach(offset => {\n                            if (pos.x > nextPos.x) booleanCave[pos.y][pos.x - offset] = true\n                            if (pos.x < nextPos.x) booleanCave[pos.y][pos.x + offset] = true\n                        })\n                }\n                const yDiff = Math.abs(pos.y - nextPos.y)\n                if (yDiff > 0) {\n                    range(yDiff + 1)\n                        .forEach(offset => {\n                            if (pos.y > nextPos.y) booleanCave[pos.y - offset][pos.x] = true\n                            if (pos.y < nextPos.y) booleanCave[pos.y + offset][pos.x] = true\n                        })\n                }\n            })\n    })\n\n    return <Grid\n        booleanGrid={booleanCave}\n        renderTrue={() => ({ backgroundColor: colors.saffron })}\n        renderFalse={() => ({})}\n        height={booleanCave.length * 50}\n        width={booleanCave[0].length * 50}\n    />\n}\n\nexport default EmptyCave\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}