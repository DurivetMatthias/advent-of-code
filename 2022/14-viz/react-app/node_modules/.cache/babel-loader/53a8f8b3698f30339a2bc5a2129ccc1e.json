{"ast":null,"code":"var _jsxFileName = \"/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/EmptyCave.js\";\nimport { puzzleInputs } from \"../../utils/PuzzleInputs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  Grid\n} = require(\"@mui/material\");\n\nconst range = n => new Array(n).fill().map((v, i) => i);\n\nconst createBooleanGrid = (width, height) => {\n  return new Array(height).fill().map(() => new Array(width).fill(false));\n};\n\nconst sandOrigin = {\n  x: 500,\n  y: 0\n};\n\nconst EmptyCave = _ref => {\n  let {\n    version\n  } = _ref;\n  const parsed = puzzleInputs[14][version].split(\"\\n\").map(line => line.split(\" -> \").map(pos => pos.split(\",\").map(n => parseInt(n))).map(pos => ({\n    x: pos[0],\n    y: pos[1]\n  })));\n  const largestY = parsed.flat().map(pos => pos.y).sort((a, b) => b - a)[0];\n  const booleanCave = createBooleanGrid(sandOrigin.x * 2, largestY);\n  parsed.forEach(formation => {\n    formation.slice(0, -1).forEach((pos, i) => {\n      const nextPos = formation[i + 1];\n      console.log('pos: ', pos);\n      console.log('nextPos: ', nextPos);\n      const xDiff = Math.abs(pos.x - nextPos.x);\n\n      if (xDiff > 0) {\n        range(xDiff + 1).forEach(offset => {\n          if (pos.x > nextPos.x) booleanCave[pos.y][pos.x - offset] = true;\n          if (pos.x < nextPos.x) booleanCave[pos.y][pos.x + offset] = true;\n        });\n      }\n\n      const yDiff = Math.abs(pos.y - nextPos.y);\n\n      if (yDiff > 0) {\n        range(yDiff + 1).forEach(offset => {\n          if (pos.y > nextPos.y) booleanCave[pos.y - offset][pos.x] = true;\n          if (pos.y < nextPos.y) booleanCave[pos.y + offset][pos.x] = true;\n        });\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    booleanCGrid: booleanCave,\n    renderTrue: () => \".\",\n    renderFalse: () => \"#\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n\n_c = EmptyCave;\nexport default EmptyCave;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmptyCave\");","map":{"version":3,"names":["puzzleInputs","Grid","require","range","n","Array","fill","map","v","i","createBooleanGrid","width","height","sandOrigin","x","y","EmptyCave","version","parsed","split","line","pos","parseInt","largestY","flat","sort","a","b","booleanCave","forEach","formation","slice","nextPos","console","log","xDiff","Math","abs","offset","yDiff"],"sources":["/Users/matthiasdurivet/Documents/advent-of-code/2022/14-viz/react-app/src/components/Atoms/EmptyCave.js"],"sourcesContent":["import { puzzleInputs } from \"../../utils/PuzzleInputs\"\n\nconst { Grid } = require(\"@mui/material\")\n\nconst range = n => new Array(n)\n    .fill()\n    .map((v, i) => i)\n\nconst createBooleanGrid = (width, height) => {\n    return new Array(height)\n        .fill()\n        .map(() => new Array(width).fill(false))\n}\nconst sandOrigin = { x: 500, y: 0 }\n\nconst EmptyCave = ({ version }) => {\n    const parsed = puzzleInputs[14][version].split(\"\\n\")\n        .map(line => line\n            .split(\" -> \")\n            .map(pos => pos\n                .split(\",\")\n                .map(n => parseInt(n))\n            )\n            .map(pos => ({ x: pos[0], y: pos[1] }))\n        )\n    const largestY = parsed.flat().map(pos => pos.y).sort((a, b) => b - a)[0]\n    const booleanCave = createBooleanGrid(sandOrigin.x * 2, largestY)\n    parsed.forEach(formation => {\n        formation\n            .slice(0, -1)\n            .forEach((pos, i) => {\n                const nextPos = formation[i + 1]\n                console.log('pos: ', pos)\n                console.log('nextPos: ', nextPos)\n                const xDiff = Math.abs(pos.x - nextPos.x)\n                if (xDiff > 0) {\n                    range(xDiff + 1)\n                        .forEach(offset => {\n                            if (pos.x > nextPos.x) booleanCave[pos.y][pos.x - offset] = true\n                            if (pos.x < nextPos.x) booleanCave[pos.y][pos.x + offset] = true\n                        })\n                }\n                const yDiff = Math.abs(pos.y - nextPos.y)\n                if (yDiff > 0) {\n                    range(yDiff + 1)\n                        .forEach(offset => {\n                            if (pos.y > nextPos.y) booleanCave[pos.y - offset][pos.x] = true\n                            if (pos.y < nextPos.y) booleanCave[pos.y + offset][pos.x] = true\n                        })\n                }\n            })\n    })\n\n    return <Grid\n        booleanCGrid={booleanCave}\n        renderTrue={() => \".\"}\n        renderFalse={() => \"#\"}\n    />\n}\n\nexport default EmptyCave\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}